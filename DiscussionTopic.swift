//
//  DiscussionTopic.swift
//  Corgis
//
//  Created by Sal Valdes on 11/19/17.
//  Copyright Â© 2017 CS147. All rights reserved.
//
// Definition of a DiscussionTopic object
// Discussion topics are objects generated by issues with existing norms
// or suggestions for new norms

import UIKit
import os.log

class DiscussionTopic: NSObject, NSCoding {
    
    //MARK: Properties
    
    struct PropertyKey {
        static let type = "type"
        static let text = "text"
        static let id = "id"
    }
    
    var type: String
    var text: String
    var id: Int
    var normId: Int?
    
    //MARK: Archiving Paths
    static let DocumentsDirectory = FileManager().urls(for: .documentDirectory, in: .userDomainMask).first!
    
    static let ArchiveURL = DocumentsDirectory.appendingPathComponent("discussionTopics")
    
    //MARK: Initialization
    
    init?(type: String, text: String, id: Int, normId: Int?) {
        
        // Type must not be empty
        guard !type.isEmpty else {
            return nil
        }
        
        // Text must not be empty
        guard !text.isEmpty else {
            return nil
        }
        
        
        // Initialize stored properties
        self.type = type
        self.text = text
        self.id = id
        self.normId = normId
    }
    
    //MARK: NSCoding
    func encode(with aCoder: NSCoder) {
        aCoder.encode(type, forKey: PropertyKey.type)
        aCoder.encode(text, forKey: PropertyKey.text)
        aCoder.encode(id, forKey: PropertyKey.id)
    }
    
    required convenience init?(coder aDecoder: NSCoder) {
        guard let type = aDecoder.decodeObject(forKey: PropertyKey.type) as? String else {
            os_log("Unable to decode the type for the DiscussionTopic object", log: OSLog.default, type: .debug)
            return nil
        }
        guard let text = aDecoder.decodeObject(forKey: PropertyKey.text) as? String else {
            os_log("Unable to decode the text for the DiscussionTopic object", log: OSLog.default, type: .debug)
            return nil
        }
        
        guard let id = aDecoder.decodeObject(forKey: PropertyKey.id) as? Int else {
            os_log("Unable to decode the id for the DiscussionTopic object", log: OSLog.default, type: .debug)
            return nil
        }
        self.init(type: type, text: text, id: id, normId: nil)
    }
}
